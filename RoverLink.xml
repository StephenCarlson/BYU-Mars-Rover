<?xml version="1.0" encoding="ISO-8859-1"?>
<!-- 
	BYU Mars Rover UDP Message Protocol, October 2014.
	Mostly inspired by MAV Link: https://pixhawk.ethz.ch/mavlink/
	Credits: 
		Steve Carlson
		<Your name here>
		
	FAQs:
	What is this, and how do I use it?
		This is a description of the UDP protocol, in XML. It is more flexible than a spreadsheet, though not quite as readable.
		The prime purpose of recording this in XML is as follows:
			Allows for GIT to track changes, rather than the cursed binary format of most spreadsheets.
			Allows for the C header files that describe the entire protocol to be generated easily by a script.
	This is messed up, the formatting is trashed, tabs are chaos!
		Use Notepad++ with tabs=4, or whatever editor you use, each tab is 4 spaces.
		Also, attempted to keep lines within 150 character long when possible.
	This is really complicated!
		Well, sort of, is there a simpler way to do all this?
		Two extremes: [Send every single variable as a separate packet/message] and [Send the entire set of variables at once in a huge message]
		The protocol below strikes the balance between granularity and uniformity. Variables are packet into messages by what they control and how.
		The parts of the protocol that need work are the packet anatomy; Do we need a Sequence counter? READ/WRITE bit?

	xmlns="RoverLink.xsd" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
-->
<roverlink xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="RoverLink.xsd">

	<version>3</version>
	<constants>
		<constant type="uint8_t" name="WRITE_BIT"	value="0x80">The Message Id is bitwise ORed with this to designate a write</constant>
		<constant type="uint8_t" name="REQUEST_BIT"	value="0x40">The Message Id is bitwise ORed with this to designate a request</constant>
	</constants>
	<typedefs>
		<typedef type="uint8_t"		name="systemState_t"></typedef>
		<typedef type="uint16_t"	name="messageMask_t"></typedef>
		<typedef type="uint8_t"		name="broadcast_t"></typedef>
	</typedefs>
	<enums>
		<enum name="BOARD_ID" target="board_id">
			<description>List of possible aliases. Each board belongs to only one kind of alias/group.</description>
				<!-- This lets our boards be UDP port and IP Address agnostic. No reason to fret about IP addresses on the rover or basestation -->
			<entry value="0" name="BASESTATION">
				<description>The Primary Basestation</description></entry>
			<entry value="1" name="MAIN_CONTROLLER">
				<description>Only a single Main Controller board, with Drive, Camera, Gimbal and Power control responsibilities.</description></entry>
			<entry value="2" name="ARM_CONTROLLER">
				<description>Only a single Arm Controller board, solely responsible for the arm and other related systems.</description></entry>
			<entry value="8" name="BASESTATION_2">
				<description>A second Ethernet device in the basestation tent, possibly the Arm Puppet.</description></entry>
		</enum>
		<enum name="SYSTEM_STATE" target="systemState">
			<description>systemState field in the heartbeat and status messages that indicates board health</description>
			<entry value="0" name="STARTUP">
				<description>Initial State, board is booting up.</description></entry>
			<entry value="1" name="NORMAL">
				<description>Normal operation.</description></entry>
			<entry value="2" name="FAILSAFE">
				<description>Code is stable, but rover has lost link. Enter benign state: Turn off scary lasers, stop wheels, etc.</description></entry>
			<entry value="3" name="ERROR">
				<description>If the board crashes, this probably won't even be reached, but if possible, this signals that code has crashed.</description></entry>
		</enum>
		<enum name="GPS_FIX_TYPE" target="fix_type">
			<description>fix_type in the GPS message</description>
			<entry value="0" name="NONE"><description>No Fix</description></entry>
			<entry value="1" name="FIX_2D"><description>2D Fix</description></entry>
			<entry value="2" name="FIX_3D"><description>Full Solution</description></entry>
			<entry value="3" name="OTHER"><description>Other or unknown</description></entry>
		</enum>
		<enum name="MESSAGE_MASK" target="messageMask_t ##name"> <!-- Fantastically dangerious to use the "##" operator, is a precompiler macro,
				but it was the only thing I could think of that describes capturing whatever variables use the messageMask_t typedef. -->
			<description>The Telemetry Config and One-Shot Message Mask. Basically, 2^(Message Id) forms the bitmask field.</description>
			<entry value="0x0001" name="HEALTH_HEARTBEAT"></entry>
			<entry value="0x0002" name="ROVER_STATUS"></entry>
			<entry value="0x0004" name="ARM_STATUS"></entry>
			<entry value="0x0008" name="RESERVED_1"></entry>
			<entry value="0x0010" name="GPS_POSITION"></entry>
			<entry value="0x0020" name="IMU_SAMPLE"></entry>
			<entry value="0x0040" name="RESERVED_2"></entry>
			<entry value="0x0080" name="DRAGONLINK_FRAME"></entry>
			<entry value="0x0100" name="DRIVE_SETPOINTS"></entry>
			<entry value="0x0200" name="VIDEO_SETPOINTS"></entry>
			<entry value="0x0400" name="ARM_SETPOINTS"></entry>
			<entry value="0x0800" name="ISHAAMA"></entry>
			<entry value="0x1000" name="LIFERAY"></entry>
			<entry value="0x2000" name="CUSTOM_DEBUG_1"></entry>
			<entry value="0x4000" name="CUSTOM_DEBUG_2"></entry>
			<entry value="0x8000" name="CUSTOM_DEBUG_3"></entry>
		</enum>
		<enum name="BROADCAST_COMMAND" target="broadcastCommand">
			<description>Broadcast Message</description>
			<entry value="0x01" 		name="SAVE_FAILSAFE_VALUES_NOW">Save setpoint values for if link lost later.</entry>
			<entry value="0xF0" 		name="PANIC_STOP">If any of the upper 4 bits != 0, panic stop.</entry>
		</enum>
	</enums>
	<messages>
		<message id="0" name="HEALTH_HEARTBEAT" access="READ_ONLY">
			<description>Each board must provide a status report of its health periodically.</description>
			<field type="uint32_t"		name="systemTimestamp"								>Milliseconds from boot</field>
			<field type="systemState_t"	name="systemState"	minValue="0" maxValue="3"		>System status code, see enum definition</field>
			<field type="uint16_t"		name="cpuLoad"		minValue="0" maxValue="1000"	>The CPU Load, 0% means idle, 100% means saturated</field>
			<field type="uint16_t"		name="busErrors"									>Count of I2C/SPI Bus errors</field>
			<field type="uint16_t"		name="ethernetErrors"								>Count of Ethernet errors</field>
			<field type="uint16_t"		name="someOtherMetric"								>Probably packet lag time, etc</field>
		</message>
		<message id="1" name="ROVER_STATUS" access="READ_ONLY">
			<description>The Main Controller Board handles the Camera and Gimbal, Drive and Power systems.</description>
			<field type="systemState_t"	name="systemState"		minValue="0"		maxValue="3"		>System status code, see enum definition</field>
			<field type="uint16_t"		name="roverVoltage"		minValue="0"		maxValue="60000"	>Voltage in mV, Ex: 12450 means 12.450 Volts</field>
			<field type="int16_t"		name="roverCurrent"		minValue="-20000"	maxValue="20000"	>Current in 10mA, Ex: 16500 means 165.00 Amps</field>
			<field type="int32_t"		name="mAhCounter"		minValue="0"		maxValue="100000"	>Battery used in mAh</field>
			<field type="uint16_t"		name="ubntLinkInteg"	minValue="0"		maxValue="1000"		>100% means perfect link, 0% is lost link, in 0.1% units</field>
			<field type="uint16_t"		name="dragonLinkRSSI"	minValue="0"		maxValue="1000"		>Same as ubntLinkInteg, for backup-link LRS receiver</field>
		</message>
		<message id="2" name="ARM_STATUS" access="READ_ONLY">
			<description>The Arm Controller Board handles the Arm, including PID controllers. May also handle soil taster "ISHAAMA".</description>
			<field type="uint8_t"	name="systemState"	minValue="0" maxValue="3"	>System status code</field>
			<field type="uint16_t"	name="dynamixelErrors"							>Number of bad reads or writes to Dynamixel servos.</field>
			<field type="int16_t"	name="pid1_error"	minValue="-2000"	maxValue="2000">Error as in the error term, a scalar value.</field>
			<field type="int16_t"	name="pid2_error"	minValue="-2000"	maxValue="2000">Same as above, for the 2nd PID controller</field>
			<field type="int16_t"	name="pid3_error"	minValue="-2000"	maxValue="2000">Same as above, for the 3rd PID controller</field>
		</message>
		<message id="3" name="RESERVED_1" access="READ_ONLY">
			<description>Reserved for future use.</description>
		</message>
		<message id="4" name="GPS_POSITION" access="READ_ONLY">
			<description>Parsed NMEA sentence data. May disband these fields in favor of echoing entire NMEA sentence.</description>
			<field type="int32_t"	name="lat"		minValue="-899999999"	maxValue="899999999"	>Latitude in 1E-7 units</field>
			<field type="int32_t"	name="lon"		minValue="-1799999999"	maxValue="1799999999"	>Longitude in 1e-7 units</field>
			<field type="int32_t"	name="alt"		minValue="-10000000"	maxValue="10000000"		>Altitude in millimeters</field>
			<field type="uint16_t"	name="hdop"		minValue="0"			maxValue="60000"		>Horizontal DOP in centimeters</field>
			<field type="uint16_t"	name="vdop"		minValue="0"			maxValue="60000"		>Vertical DOP in centimeters</field>
			<field type="uint16_t"	name="vel"		minValue="0"			maxValue="2000"			>Velocity in cm/sec</field>
			<field type="uint16_t"	name="course"	minValue="0"			maxValue="3599"			>Course in 0.1 degrees units</field>
			<field type="uint8_t"	name="fix_type"	minValue="0"			maxValue="3"			>Fix Type, see the enum definition</field>
			<field type="uint8_t"	name="sats"		minValue="0"			maxValue="30"			>Number of satellites locked on</field>
		</message>
		<message id="5" name="IMU_SAMPLE" access="READ_ONLY">
			<description>The samples from the IMU, probably a MPU-9250. North-East-Down conventions.</description>
			<field type="int16_t" name="xacc"	>X Acceleration, Front+</field>
			<field type="int16_t" name="yacc"	>Y Acceleration, Starboard+</field>
			<field type="int16_t" name="zacc"	>Z Acceleration, Down+</field>
			<field type="int16_t" name="xgyro"	>X Rotation Rate</field>
			<field type="int16_t" name="ygyro"	>Y Rotation Rate</field>
			<field type="int16_t" name="zgyro"	>Z Rotation Rate</field>
			<field type="int16_t" name="xmag"	>X B-Field Component</field>
			<field type="int16_t" name="ymag"	>Y B-Field Component</field>
			<field type="int16_t" name="zmag"	>Z B-Field Component</field>
		</message>
		<message id="6" name="RESERVED_2" access="READ_ONLY">
			<description>Reserved for future use.</description>
		</message>
		<message id="7" name="DRAGONLINK_FRAME" access="READ_ONLY">
			<description>The DragonLink LRS is the backup R/C receiver on the rover, for if the Rocket M2 modems lose link.</description>
			<field type="uint16_t" name="ppmCh1" minValue="800" maxValue="2200" initValue="1500">Channel 1, usually Roll (Rover Left-Right)</field>
			<field type="uint16_t" name="ppmCh2" minValue="800" maxValue="2200" initValue="1500">Channel 2, usually Pitch (Rover Foward-Back)</field>
			<field type="uint16_t" name="ppmCh3" minValue="800" maxValue="2200" initValue="1500">Channel 3, throttle stick (Gimbal Tilt)</field>
			<field type="uint16_t" name="ppmCh4" minValue="800" maxValue="2200" initValue="1500">Channel 4, rudder (Gimbal Pan)</field>
			<field type="uint16_t" name="ppmCh5" minValue="800" maxValue="2200" initValue="1500">Channel 5</field>
			<field type="uint16_t" name="ppmCh6" minValue="800" maxValue="2200" initValue="1500">Channel 6</field>
			<field type="uint16_t" name="ppmCh7" minValue="800" maxValue="2200" initValue="1500">Channel 7, Backup-Link Asserts control if >1800us, doubles as Panic Stop</field>
			<field type="uint16_t" name="ppmCh8" minValue="800" maxValue="2200" initValue="1500">Channel 8, DragonLink in Failsafe Mode if >1800us</field>
		</message>
		<message id="8" name="DRIVE_SETPOINTS" access="READ_WRITE">
			<description>Drive commands for rover movement.</description>
			<field type="int16_t" name="driveFwd"	minValue="-1000" maxValue="1000" initValue="0">Forward Drive Component</field>
			<field type="int16_t" name="driveTurn"	minValue="-1000" maxValue="1000" initValue="0">Turning Drive Component</field>
		</message>
		<message id="9" name="VIDEO_SETPOINTS" access="READ_WRITE">
			<description>Camera selection and zoom, Gimbal Pan and Tilt.</description>
			<field type="int16_t"	name="gimbalPan"	minValue="-1000"	maxValue="1000"	initValue="0">Gimbal Pan Value</field>
			<field type="int16_t"	name="gimbalTilt"	minValue="-1000"	maxValue="1000"	initValue="0">Gimbal Tilt Value</field>
			<field type="uint16_t"	name="gimbalZoom"	minValue="0"		maxValue="1000"	initValue="0">Gimbal Zoom Value</field>
			<field type="int8_t"	name="camSelect"	minValue="0"		maxValue="8"	initValue="0">Camera Mux Selector</field>
		</message>
		<message id="10" name="ARM_SETPOINTS" access="READ_WRITE">
			<description>Arm/joint positions and Drill and Claw setpoints.</description>
			<field type="int16_t" name="baseAzimuth"	minValue="-1000" maxValue="1000" initValue="0">Also known as turret, pans entire arm</field>
			<field type="int16_t" name="shoulder"		minValue="-1000" maxValue="1000" initValue="0">Shoulder: first pitch joint</field>
			<field type="int16_t" name="elbow"			minValue="-1000" maxValue="1000" initValue="0">Elbow: second pitch joint</field>
			<field type="int16_t" name="wristTilt"		minValue="-1000" maxValue="1000" initValue="0">Wrist flap motion, final pitch joint</field>
			<field type="int16_t" name="wristRotate"	minValue="-1000" maxValue="1000" initValue="0">Wrist roll motion</field>
			<field type="int16_t" name="effectorA"		minValue="-1000" maxValue="1000" initValue="0">Open/Close Claw</field>
			<field type="int16_t" name="effectorB"		minValue="-1000" maxValue="1000" initValue="0">Roller or Drill, configuration-dependant</field>
		</message>
		<message id="11" name="ISHAAMA" access="READ_WRITE">
			<description>The soil taste tester. Likely is Read-Only, nothing to write to. Assuming 12-bit ADC</description>
			<field type="uint16_t" name="hygrometer"	minValue="0" maxValue="4095">The Soil Hygrometer probe</field>
			<field type="uint16_t" name="phMeter"		minValue="0" maxValue="4095">The Soil ph Meter probe</field>
		</message>
		<message id="12" name="LIFERAY" access="READ_WRITE">
			<description>Big scary laser.</description>
			<field type="uint8_t" name="laserDutyCycle" minValue="0" maxValue="255" initValue="0">Set the laser's intensity</field>
		</message>
		<message id="13" name="CUSTOM_DEBUG_1" access="READ_WRITE">
			<description>All the custom fields can be anything, but the payload size (16 bytes) is constant.</description>
			<field type="uint16_t" name="custom00">Dynamixel Servo 1 Stress/Current Value</field>
			<field type="uint16_t" name="custom01">Dynamixel Servo 2 Stress/Current Value</field>
			<field type="uint16_t" name="custom02">Dynamixel Servo 3 Stress/Current Value</field>
			<field type="uint16_t" name="custom03">Dynamixel Servo 4 Stress/Current Value</field>
			<field type="uint16_t" name="custom04">Description</field>
			<field type="uint16_t" name="custom05">Description</field>
			<field type="uint16_t" name="custom06">Description</field>
			<field type="uint16_t" name="custom07">Description</field>
		</message>
		<message id="14" name="CUSTOM_DEBUG_2" access="READ_WRITE">
			<description>All the custom fields can be anything, but the payload size (16 bytes) is constant.</description>
			<field type="uint16_t" name="custom20">Description</field>
			<field type="uint16_t" name="custom21">Description</field>
			<field type="uint16_t" name="custom22">Description</field>
			<field type="uint16_t" name="custom23">Description</field>
			<field type="uint16_t" name="custom24">Description</field>
			<field type="uint16_t" name="custom25">Description</field>
			<field type="uint16_t" name="custom26">Description</field>
			<field type="uint16_t" name="custom27">Description</field>
		</message>
		<message id="15" name="CUSTOM_DEBUG_3" access="READ_WRITE">
			<description>All the custom fields can be anything, but the payload size (16 bytes) is constant.</description>
			<field type="uint16_t" name="custom30">Description</field>
			<field type="uint16_t" name="custom31">Description</field>
			<field type="uint16_t" name="custom32">Description</field>
			<field type="uint16_t" name="custom33">Description</field>
			<field type="uint16_t" name="custom34">Description</field>
			<field type="uint16_t" name="custom35">Description</field>
			<field type="uint16_t" name="custom36">Description</field>
			<field type="uint16_t" name="custom37">Description</field>
		</message>
		<message id="60" name="PING" access="READ_WRITE">
			<description>Used to verify that the entire UDP comm system is functional. Payload proves this if uniquely generated at basestation and compared to response.</description>
			<field type="uint8_t[8]" name="payload">Description</field>
		</message>
		<message id="61" name="TELEMETRY_CONFIG" access="READ_WRITE">
			<description>The 16 rover messages can be assigned to send cyclically by setting bits in these bitmasks.</description>
			<field type="messageMask_t" name="telemetryMask_10HZ"	initValue="0b0000000000000110">Fast Telemetry Loop</field>
			<field type="messageMask_t" name="telemetryMask_1HZ"	initValue="0b0011111110110001">Intermediate Loop</field>
			<field type="messageMask_t" name="telemetryMask_10SEC"	initValue="0b0100000000000000">Slow Loop</field>
		</message>
		<message id="62" name="REQ_FIELDS_ONCE" access="WRITE_ONLY">
			<description>Just one time instead of configuring continuous telemetry. Probably superfiluous if Read/Write mechanism of this protocol can stimulate a single register.</description>
			<field type="messageMask_t" name="oneShotMask">Request a set of messages only one time, not set for cyclic</field>
		</message>
		<message id="63" name="BROADCAST" access="WRITE_ONLY">
			<description>Broadcast a message to all controller boards at once. Used for universal commands like Panic Stop, etc</description>
			<field type="broadcast_t" name="broadcastCommand" minValue="0" maxValue="255" initValue="0">See broadcast_t description</field>
		</message>
	</messages>

</roverlink>

<!-- Packet Anatomy 
<packet_anatomy>
	<frame>
		<ethernet_header/>
		<ip4_header/>
		<udp_header/>
		<udp_data>
			<roverlink_frame>
				<src_board_id 	bits="4">Source/Originating device. 0x00 for Basestation, see BOARD_ID enum for others</src_board_id>
				<dst_board_id 	bits="4">Intended Recipient device. 0x01 for Main Controller, see BOARD_ID enum for others</dst_board_id>
				<write_bit		bits="1">The address byte's MSB is 1 for setpoint write packets, 0 for all else</write_bit>
				<request_bit	bits="1">This bit is set to 1 when requesting the contents of a message or writing, 0 otherwise</request_bit>
				<message_id 	bits="6">ROVER_STATUS would give 0x01 for this field</message_id>
				<sequence_cnt 	bits="8">Packet unique number, rolls over at 255</sequence_cnt>
				<payload_len	bits="8">Payload size</payload_len>
				<payload bits=8*payload_len>This is the message struct: All fields sent in sequence, MSB first (Big-endian)</payload>
			</roverlink_frame>
		</udp_data>
		<ethernet_padding/>
	</frame>
</packet_anatomy>
-->
<!-- Note on ports: 1024 through 49151 are registered ports (Use these), 49152 through 65535 are Ephemeral (Avoid)-->

<!-- Example Byte Runs

Basestation write Drive Setpoints to Main Controller
    0000   |Src MAC Address| |Dst MAC Address| Type  VL DS
    0010   Lngth Ident Fg Of TT Pr chksm SrcIpAddres DstIp
    0020   Addrs SrcPr DstPr Lngth chksm 01 c8 00 04 03 e8
    0030   00 00 

    01 C8 00 04 03 E8 00 00    Description
    
    0                          Source is Base Station (0x00)
     1                         Destination is Main Controller Board (0x01)
       C8                      0b11001000: Write (MSB=1), 1000 = 0x08 = DRIVE_SETPOINTS Message
          00                   uint8_t 0: 1st Packet sent from Basestation (or is it called zeroth?)
             04                uint8_t 4: 4 bytes remaining after this byte
                03 E8          int16_t 1000: Drive full forward +1000
                      00 00    int16_t 0: 0 Turn component



Basestation requests Arm Setpoints	
    02 4A 01 00
    Src: Basestation, Dst: Arm Board
       Read ARM_SETPOINTS
          2nd Packet sent by Basestation
             No Payload, this should be the last byte of the packet

Arm Board responds with the current arm setpoints
    20 0A 00 0E 0000 0000 0000 0000 0000 0000 0000
    Src: Arm Board, Dst: Basestation
       ARM_SETPOINTS Report, bits 7 and 6 clears, representing this is a response packet.
          1st Packet sent by the Arm board (Sequence starts at 0)
             14 Bytes in payload
                All zeros, initial values for rebooted arm board.

Basestation write new values to the Arm Board
    02 CA 02 0E 0000 00FA 02BC 00FA 0000 0000 0000
    Src: Basestation, Dst: Arm Board
       Message: Write ARM_SETPOINTS
          3rd Packet sent by Basestation (0,1,2; 0x02 represends 2, but there have been 3 packets)
             14 Bytes in the payload
                0->baseAzimuth
                     250->shoulder
                          700->elbow
                               250->wristTilt
                                    0->wristRotate
                                         etc

Basestation requests Arm Setpoints
    02 4A 03 00
    Src: Basestation, Dst: Arm Board
       Request ARM_SETPOINTS, bit 6 is set indicating request
          4th Packet sent by Basestation
             No Payload; even if there are more bytes after this, they should be ignored

Arm Board responds with the current arm setpoints
    20 0A 01 0E 0000 00FA 02BC 00FA 0000 0000 0000
    Src: Arm Board, Dst: Basestation
       ARM_SETPOINTS Report, bits 7 and 6 cleared
          Seq count is 0x01, this is the 2nd packet originating from the Arm Board
             14 Bytes in payload
                Bytes match the write made earlier.

Basestation asks for a set of messages to be transmitted back once
    02 FD 04 02 0500
    Basestation to Arm Board
       Message #253 with WRITE and REQUEST bits active (signifing a write)
          5th Message transmitted by Basestation
             2-byte payload
                Bitmask with 1's on the 8th and 10th digits, corresponding to messages #8 (Drive) and #10 (Arm).

-->

<!-- Comments on WRITE and REQUEST bit selection
This protocol is somewhat tricky, or quirky, in that it tries to draw on several common traditions.
In many network protocols, the all-ones case (like 0xFF, 0xFFFF) is the broadcast address.
The broadcast address is meant to be listened to by all devices on the network.
I borrow from the I2C and SPI world with the Read/Write bit idea: Its state indicates read or write.
To try to have both traditions, the WRITE pattern is 0x11xxxxxx, so that BROADCAST can be 0xFF/255. 
This also made numbers nice for the writeable structs, like 200 for Drive, 201 for video, etc.
This protocol is lousy in that it has a special case of 0x11xxxxxx for write, which overlaps somewhat.
It would be better to have the WRITE pattern to be 0x10xxxxxx, and REQUEST stays at 0x01xxxxxx.
This is a one-hot encoding of sorts, and would allow for compound operations, 0x11xxxxxx would mean: 
Write first, then immediately respond with the struct contents to assure the packet was processed.
However, I liked the arrangement as it currently stands in terms of nice numbers, and: The above 
behavior is totally doable. Put another way: The pattern 0x11xxxxxx can trigger a immediate response to 
verify to the basestation that the packet was received and processed.
Keeping the current convention also reads somewhat like an plain-english order: Write-request, or 
read-request; or read-reply, with no such thing as a write-reply?

-->

<!-- Comments on Sequence Counter Purpose and Usage
The purpose of the sequence counter is to give each packet a "name" that idenfies it.
It is not the Message Id, which states what kind of packet, we want a unique Id for each packet sent.
A one byte sequence counter yields 255 possible names for each packet, and provided that a given control board only sends perhaps
5 message types at 10 Hz and another 5 at 1 Hz, that totals to 55 packets per second, allowing 4 seconds between the 
sequence counter rolling over to zero on average.
By numbering each packet being sent sequensially, the receiving device downstream can know if any packets are missing. This allows 
us to generate a link percentage metric, say, we are receiving 91% of the rover packets, so the link is starting to decay, etc.
The sequence counter also allows the downstream receiving device to know the age of a packet, and whether to throw a late message 
away which has been beaten by a newer packet.



-->

<!-- Overview
                ab: 11=Write, 01=Request, 00=Response, 10=Invalid
0		0x00	ab000000	Board Health / Heartbeat
1		0x01	ab000001	Rover Status
2		0x02	ab000010	Arm Status
3		0x03	ab000011	<Reserved>
4		0x04	ab000100	GPS Position
5		0x05	ab000101	IMU Samples
6		0x06	ab000110	<Reserved>
7		0x07	ab000111	Dragonlink Samples
8		0x08	ab001000	Rover Drive Setpoints
9		0x09	ab001001	Camera & Gimbal Setpoints
10		0x0A	ab001010	Arm Setpoints
11		0x0B	ab001011	ISHAAMA
12		0x0C	ab001100	LIFERAY
13		0x0D	ab001101	Custom Debug 3
14		0x0E	ab001110	Custom Debug 2
15		0x0F	ab001111	Custom Debug 1
60		0x3C	ab100100	Ping
61		0x3D	ab100101	Telemetry Config
62		0x3E	ab100110	Request Single (One Shot)
63		0x3F	ab111111	Broadcast
-->