<?xml version="1.0" encoding="ISO-8859-1" ?>
<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema">

<!-- definition of simple elements -->
<xs:element name="include" type="xs:anyURI"/> <!-- Not sure what this does, keep? -->
<xs:element name="version" type="xs:unsignedByte"/>
<xs:element name="description" type="xs:string"/>


<!-- definition of attributes -->
<xs:attribute name="name"> <!-- enum,entry,message,field -->
	<xs:simpleType>
		<xs:restriction base="xs:string">
			<xs:pattern value="[a-zA-z0-9_]{1,30}(\[([0-9])+\])?"/>
			<!-- I gave up on trying to imitate the mavlink generator, it can do uint8_t[8],
					I will have to stick with payload[8]. Thus, allows [] on names. -->
		</xs:restriction>
	</xs:simpleType>
</xs:attribute>
<xs:attribute name="target"> <!-- enum,entry,message,field -->
	<xs:simpleType>
		<xs:restriction base="xs:string">
			<xs:pattern value="([a-zA-z0-9_]{1,30}){1}( ##name)?"/>
		</xs:restriction>
	</xs:simpleType>
</xs:attribute>
<xs:attribute name="id" type="xs:unsignedByte"/> <!-- message -->
<xs:attribute name="value"> <!-- entry -->
	<xs:simpleType>
		<xs:restriction base="xs:string">
			<xs:pattern value="\d{1,10}"/> <!-- base 10 int -->
			<xs:pattern value="0[xX][0-9a-fA-F]{1,8}"/> <!-- base 16 -->
			<xs:pattern value="0[bB][0-1]{1,32}"/> <!-- base 1 -->
		</xs:restriction>
	</xs:simpleType>
</xs:attribute>
<xs:attribute name="minValue"> <!-- entry -->
	<xs:simpleType>
		<xs:restriction base="xs:string">
			<xs:pattern value="-?\d{1,10}"/> <!-- base 10 int -->
			<xs:pattern value="0[xX][0-9a-fA-F]{1,8}"/> <!-- base 16 -->
			<xs:pattern value="0[bB][0-1]{1,32}"/> <!-- base 1 -->
		</xs:restriction>
	</xs:simpleType>
</xs:attribute>
<xs:attribute name="maxValue"> <!-- entry -->
	<xs:simpleType>
		<xs:restriction base="xs:string">
			<xs:pattern value="-?\d{1,10}"/> <!-- base 10 int -->
			<xs:pattern value="0[xX][0-9a-fA-F]{1,8}"/> <!-- base 16 -->
			<xs:pattern value="0[bB][0-1]{1,32}"/> <!-- base 1 -->
		</xs:restriction>
	</xs:simpleType>
</xs:attribute>
<xs:attribute name="initValue"> <!-- entry -->
	<xs:simpleType>
		<xs:restriction base="xs:string">
			<xs:pattern value="-?\d{1,10}"/> <!-- base 10 int -->
			<xs:pattern value="0[xX][0-9a-fA-F]{1,8}"/> <!-- base 16 -->
			<xs:pattern value="0[bB][0-1]{1,32}"/> <!-- base 1 -->
		</xs:restriction>
	</xs:simpleType>
</xs:attribute>
<xs:attribute name="type">
	<xs:simpleType>
		<xs:restriction base="xs:string">
			<xs:pattern value="int8_t(\[([0-9])+\])?"/>
			<xs:pattern value="uint8_t(\[([0-9])+\])?"/>
			<xs:pattern value="int16_t(\[([0-9])+\])?"/>
			<xs:pattern value="uint16_t(\[([0-9])+\])?"/>
			<xs:pattern value="int32_t(\[([0-9])+\])?"/>
			<xs:pattern value="uint32_t(\[([0-9])+\])?"/>
			<xs:pattern value="int64_t(\[([0-9])+\])?"/>
			<xs:pattern value="uint64_t(\[([0-9])+\])?"/>
			<xs:pattern value="systemState_t"/>
			<xs:pattern value="messageMask_t"/>
			<xs:pattern value="broadcast_t"/>
		</xs:restriction>
	</xs:simpleType>
</xs:attribute>
<xs:attribute name="access">
	<xs:simpleType>
		<xs:restriction base="xs:string">
			<xs:pattern value="READ_ONLY"/>
			<xs:pattern value="WRITE_ONLY"/>
			<xs:pattern value="READ_WRITE"/>
		</xs:restriction>
	</xs:simpleType>
</xs:attribute>

<!-- definition of complex elements -->

<xs:element name="entry">
	<xs:complexType mixed="true">
		<xs:sequence>
			<xs:element ref="description" minOccurs="0"/>
		</xs:sequence>
		<xs:attribute ref="value" use="required"/>
		<xs:attribute ref="name" use="required"/>
	</xs:complexType>
</xs:element>

<xs:element name="field">
	<xs:complexType mixed="true"> <!-- mixed allows text to appear between <field> and </field> tags -->
		<xs:sequence>
			<xs:element ref="description" minOccurs="0"/>
		</xs:sequence>
		<xs:attribute ref="type" use="required"/>
		<xs:attribute ref="name" use="required"/>
		<xs:attribute ref="minValue"/>
		<xs:attribute ref="maxValue"/>
		<xs:attribute ref="initValue"/>
	</xs:complexType>
</xs:element>

<xs:element name="constant">
	<xs:complexType mixed="true">
		<xs:sequence>
			<xs:element ref="description" minOccurs="0"/>
		</xs:sequence>
		<xs:attribute ref="type" use="required"/>
		<xs:attribute ref="name" use="required"/>
		<xs:attribute ref="value" use="required"/>
	</xs:complexType>
</xs:element>

<xs:element name="typedef">
	<xs:complexType mixed="true">
		<xs:sequence>
			<xs:element ref="description" minOccurs="0"/>
		</xs:sequence>
		<xs:attribute ref="type" use="required"/>
		<xs:attribute ref="name" use="required"/>
	</xs:complexType>
</xs:element>

<xs:element name="enum">
	<xs:complexType>
		<xs:sequence>
			<xs:element ref="description" minOccurs="0"/>
			<xs:element ref="entry" maxOccurs="unbounded"/>
		</xs:sequence>
		<xs:attribute ref="name" use="required"/>
		<xs:attribute ref="target" use="required"/>
	</xs:complexType>
</xs:element>

<xs:element name="message">
	<xs:complexType>
		<xs:sequence>
			<xs:element ref="description" minOccurs="0"/>
			<xs:element ref="field" minOccurs="0" maxOccurs="unbounded"/>
		</xs:sequence>
		<xs:attribute ref="id" use="required"/>
		<xs:attribute ref="name" use="required"/>
		<xs:attribute ref="access" use="required"/>
	</xs:complexType>
</xs:element>

<xs:element name="constants">
	<xs:complexType>
		<xs:sequence>
			<xs:element ref="constant" maxOccurs="unbounded" minOccurs="0"/>
		</xs:sequence>
	</xs:complexType>
</xs:element>

<xs:element name="typedefs">
	<xs:complexType>
		<xs:sequence>
			<xs:element ref="typedef" maxOccurs="unbounded" minOccurs="0"/>
		</xs:sequence>
	</xs:complexType>
</xs:element>

<xs:element name="enums">
	<xs:complexType>
		<xs:sequence>
			<xs:element ref="enum" maxOccurs="unbounded" minOccurs="0"/>
		</xs:sequence>
	</xs:complexType>
</xs:element>

<xs:element name="messages">
	<xs:complexType>
		<xs:sequence>
			<xs:element ref="message" maxOccurs="unbounded" minOccurs="0"/>
		</xs:sequence>
	</xs:complexType>
</xs:element>

<xs:element name="roverlink">
	<xs:complexType>
		<xs:sequence>
			<xs:element ref="include" minOccurs="0"/>
			<xs:element ref="version" minOccurs="0"/>
			<xs:element ref="constants" minOccurs="0"/>
			<xs:element ref="typedefs" minOccurs="0"/>
			<xs:element ref="enums" minOccurs="0"/>
			<xs:element ref="messages"/>
		</xs:sequence>
	</xs:complexType>
</xs:element>

</xs:schema>
